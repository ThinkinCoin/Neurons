/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface IVerifierInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "buildMessageHash"
      | "domainSeparator"
      | "setTrustedSigner"
      | "trustedSigner"
      | "verify"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "buildMessageHash",
    values: [AddressLike, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "domainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setTrustedSigner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "trustedSigner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verify",
    values: [AddressLike, BigNumberish, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "buildMessageHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTrustedSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;
}

export interface IVerifier extends BaseContract {
  connect(runner?: ContractRunner | null): IVerifier;
  waitForDeployment(): Promise<this>;

  interface: IVerifierInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  buildMessageHash: TypedContractMethod<
    [
      recipient: AddressLike,
      amount: BigNumberish,
      nonce: BytesLike,
      expiry: BigNumberish
    ],
    [string],
    "view"
  >;

  domainSeparator: TypedContractMethod<[], [string], "view">;

  setTrustedSigner: TypedContractMethod<
    [newSigner: AddressLike],
    [void],
    "nonpayable"
  >;

  trustedSigner: TypedContractMethod<[], [string], "view">;

  verify: TypedContractMethod<
    [
      recipient: AddressLike,
      amount: BigNumberish,
      proof: BytesLike,
      nonce: BytesLike
    ],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "buildMessageHash"
  ): TypedContractMethod<
    [
      recipient: AddressLike,
      amount: BigNumberish,
      nonce: BytesLike,
      expiry: BigNumberish
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "domainSeparator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setTrustedSigner"
  ): TypedContractMethod<[newSigner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "trustedSigner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "verify"
  ): TypedContractMethod<
    [
      recipient: AddressLike,
      amount: BigNumberish,
      proof: BytesLike,
      nonce: BytesLike
    ],
    [boolean],
    "view"
  >;

  filters: {};
}
