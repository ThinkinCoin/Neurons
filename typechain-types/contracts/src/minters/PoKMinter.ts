/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface PoKMinterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "batchMintWithProofs"
      | "canMint"
      | "dailyMintAmount"
      | "emergencySetNonceUsed"
      | "getMintingStats"
      | "getNextMintTime"
      | "getRemainingDailyLimit"
      | "lastMintDay"
      | "lastMintTime"
      | "maxDailyMint"
      | "maxSingleMint"
      | "minCooldown"
      | "mintWithProof"
      | "nonceUsed"
      | "owner"
      | "pause"
      | "paused"
      | "renounceOwnership"
      | "setLimits"
      | "setToken"
      | "setVerifier"
      | "token"
      | "totalMintsProcessed"
      | "totalTokensMinted"
      | "transferOwnership"
      | "unpause"
      | "verifier"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "LimitsUpdated"
      | "MintedWithProof"
      | "OwnershipTransferred"
      | "Paused"
      | "TokenSet"
      | "Unpaused"
      | "VerifierSet"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "batchMintWithProofs",
    values: [AddressLike[], BigNumberish[], BytesLike[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "canMint",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dailyMintAmount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencySetNonceUsed",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getMintingStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNextMintTime",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRemainingDailyLimit",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastMintDay",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lastMintTime",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxDailyMint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxSingleMint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minCooldown",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintWithProof",
    values: [AddressLike, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nonceUsed",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setLimits",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setVerifier",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalMintsProcessed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalTokensMinted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(functionFragment: "verifier", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "batchMintWithProofs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canMint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dailyMintAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencySetNonceUsed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMintingStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNextMintTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRemainingDailyLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastMintDay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastMintTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxDailyMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxSingleMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minCooldown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintWithProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonceUsed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setLimits", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalMintsProcessed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalTokensMinted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verifier", data: BytesLike): Result;
}

export namespace LimitsUpdatedEvent {
  export type InputTuple = [
    minCooldown: BigNumberish,
    maxDailyMint: BigNumberish,
    maxSingleMint: BigNumberish
  ];
  export type OutputTuple = [
    minCooldown: bigint,
    maxDailyMint: bigint,
    maxSingleMint: bigint
  ];
  export interface OutputObject {
    minCooldown: bigint;
    maxDailyMint: bigint;
    maxSingleMint: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MintedWithProofEvent {
  export type InputTuple = [
    to: AddressLike,
    amount: BigNumberish,
    nonce: BytesLike
  ];
  export type OutputTuple = [to: string, amount: bigint, nonce: string];
  export interface OutputObject {
    to: string;
    amount: bigint;
    nonce: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenSetEvent {
  export type InputTuple = [token: AddressLike];
  export type OutputTuple = [token: string];
  export interface OutputObject {
    token: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VerifierSetEvent {
  export type InputTuple = [verifier: AddressLike];
  export type OutputTuple = [verifier: string];
  export interface OutputObject {
    verifier: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PoKMinter extends BaseContract {
  connect(runner?: ContractRunner | null): PoKMinter;
  waitForDeployment(): Promise<this>;

  interface: PoKMinterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  batchMintWithProofs: TypedContractMethod<
    [
      recipients: AddressLike[],
      amounts: BigNumberish[],
      proofs: BytesLike[],
      nonces: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;

  canMint: TypedContractMethod<
    [user: AddressLike, amount: BigNumberish],
    [boolean],
    "view"
  >;

  dailyMintAmount: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  emergencySetNonceUsed: TypedContractMethod<
    [nonce: BytesLike, used: boolean],
    [void],
    "nonpayable"
  >;

  getMintingStats: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        totalMints: bigint;
        totalMinted: bigint;
        averageMintSize: bigint;
      }
    ],
    "view"
  >;

  getNextMintTime: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  getRemainingDailyLimit: TypedContractMethod<
    [user: AddressLike],
    [bigint],
    "view"
  >;

  lastMintDay: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  lastMintTime: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  maxDailyMint: TypedContractMethod<[], [bigint], "view">;

  maxSingleMint: TypedContractMethod<[], [bigint], "view">;

  minCooldown: TypedContractMethod<[], [bigint], "view">;

  mintWithProof: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish, proof: BytesLike, nonce: BytesLike],
    [void],
    "nonpayable"
  >;

  nonceUsed: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setLimits: TypedContractMethod<
    [
      minCooldown_: BigNumberish,
      maxDailyMint_: BigNumberish,
      maxSingleMint_: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setToken: TypedContractMethod<[token_: AddressLike], [void], "nonpayable">;

  setVerifier: TypedContractMethod<
    [verifier_: AddressLike],
    [void],
    "nonpayable"
  >;

  token: TypedContractMethod<[], [string], "view">;

  totalMintsProcessed: TypedContractMethod<[], [bigint], "view">;

  totalTokensMinted: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  verifier: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "batchMintWithProofs"
  ): TypedContractMethod<
    [
      recipients: AddressLike[],
      amounts: BigNumberish[],
      proofs: BytesLike[],
      nonces: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "canMint"
  ): TypedContractMethod<
    [user: AddressLike, amount: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "dailyMintAmount"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "emergencySetNonceUsed"
  ): TypedContractMethod<
    [nonce: BytesLike, used: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getMintingStats"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        totalMints: bigint;
        totalMinted: bigint;
        averageMintSize: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getNextMintTime"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRemainingDailyLimit"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastMintDay"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastMintTime"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxDailyMint"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxSingleMint"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minCooldown"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "mintWithProof"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish, proof: BytesLike, nonce: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "nonceUsed"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setLimits"
  ): TypedContractMethod<
    [
      minCooldown_: BigNumberish,
      maxDailyMint_: BigNumberish,
      maxSingleMint_: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setToken"
  ): TypedContractMethod<[token_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setVerifier"
  ): TypedContractMethod<[verifier_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalMintsProcessed"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalTokensMinted"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "verifier"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "LimitsUpdated"
  ): TypedContractEvent<
    LimitsUpdatedEvent.InputTuple,
    LimitsUpdatedEvent.OutputTuple,
    LimitsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "MintedWithProof"
  ): TypedContractEvent<
    MintedWithProofEvent.InputTuple,
    MintedWithProofEvent.OutputTuple,
    MintedWithProofEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "TokenSet"
  ): TypedContractEvent<
    TokenSetEvent.InputTuple,
    TokenSetEvent.OutputTuple,
    TokenSetEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "VerifierSet"
  ): TypedContractEvent<
    VerifierSetEvent.InputTuple,
    VerifierSetEvent.OutputTuple,
    VerifierSetEvent.OutputObject
  >;

  filters: {
    "LimitsUpdated(uint256,uint256,uint256)": TypedContractEvent<
      LimitsUpdatedEvent.InputTuple,
      LimitsUpdatedEvent.OutputTuple,
      LimitsUpdatedEvent.OutputObject
    >;
    LimitsUpdated: TypedContractEvent<
      LimitsUpdatedEvent.InputTuple,
      LimitsUpdatedEvent.OutputTuple,
      LimitsUpdatedEvent.OutputObject
    >;

    "MintedWithProof(address,uint256,bytes32)": TypedContractEvent<
      MintedWithProofEvent.InputTuple,
      MintedWithProofEvent.OutputTuple,
      MintedWithProofEvent.OutputObject
    >;
    MintedWithProof: TypedContractEvent<
      MintedWithProofEvent.InputTuple,
      MintedWithProofEvent.OutputTuple,
      MintedWithProofEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "TokenSet(address)": TypedContractEvent<
      TokenSetEvent.InputTuple,
      TokenSetEvent.OutputTuple,
      TokenSetEvent.OutputObject
    >;
    TokenSet: TypedContractEvent<
      TokenSetEvent.InputTuple,
      TokenSetEvent.OutputTuple,
      TokenSetEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "VerifierSet(address)": TypedContractEvent<
      VerifierSetEvent.InputTuple,
      VerifierSetEvent.OutputTuple,
      VerifierSetEvent.OutputObject
    >;
    VerifierSet: TypedContractEvent<
      VerifierSetEvent.InputTuple,
      VerifierSetEvent.OutputTuple,
      VerifierSetEvent.OutputObject
    >;
  };
}
