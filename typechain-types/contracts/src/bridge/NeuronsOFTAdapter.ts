/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface NeuronsOFTAdapterInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "allowRemote"
      | "emergencyWithdraw"
      | "endpoint"
      | "estimateSendFee"
      | "getBridgeStats"
      | "getChainStats"
      | "getTrustedRemote"
      | "isBurnMintMode"
      | "isChainAllowed"
      | "owner"
      | "pause"
      | "paused"
      | "receivedFromChain"
      | "remoteChainAllowed"
      | "renounceOwnership"
      | "sendTokens"
      | "sentToChain"
      | "setBridgeMode"
      | "setEndpoint"
      | "setTrustedRemote"
      | "token"
      | "totalReceived"
      | "totalSent"
      | "transferOwnership"
      | "trustedRemoteLookup"
      | "unpause"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BridgeModeSet"
      | "EndpointSet"
      | "OwnershipTransferred"
      | "Paused"
      | "RemoteChainAllowed"
      | "TokensReceived"
      | "TokensSent"
      | "TrustedRemoteSet"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "allowRemote",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "endpoint", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "estimateSendFee",
    values: [BigNumberish, AddressLike, BigNumberish, boolean, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBridgeStats",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getChainStats",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTrustedRemote",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isBurnMintMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isChainAllowed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "receivedFromChain",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "remoteChainAllowed",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sendTokens",
    values: [BigNumberish, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sentToChain",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setBridgeMode",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setEndpoint",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTrustedRemote",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalReceived",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "totalSent", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "trustedRemoteLookup",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "allowRemote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endpoint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "estimateSendFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBridgeStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChainStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTrustedRemote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBurnMintMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isChainAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "receivedFromChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "remoteChainAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sendTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sentToChain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBridgeMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEndpoint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTrustedRemote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalSent", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "trustedRemoteLookup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
}

export namespace BridgeModeSetEvent {
  export type InputTuple = [isBurnMintMode: boolean];
  export type OutputTuple = [isBurnMintMode: boolean];
  export interface OutputObject {
    isBurnMintMode: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EndpointSetEvent {
  export type InputTuple = [endpoint: AddressLike];
  export type OutputTuple = [endpoint: string];
  export interface OutputObject {
    endpoint: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RemoteChainAllowedEvent {
  export type InputTuple = [lzChainId: BigNumberish, allowed: boolean];
  export type OutputTuple = [lzChainId: bigint, allowed: boolean];
  export interface OutputObject {
    lzChainId: bigint;
    allowed: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensReceivedEvent {
  export type InputTuple = [
    to: AddressLike,
    srcChainId: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [to: string, srcChainId: bigint, amount: bigint];
  export interface OutputObject {
    to: string;
    srcChainId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensSentEvent {
  export type InputTuple = [
    from: AddressLike,
    dstChainId: BigNumberish,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    from: string,
    dstChainId: bigint,
    to: string,
    amount: bigint
  ];
  export interface OutputObject {
    from: string;
    dstChainId: bigint;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TrustedRemoteSetEvent {
  export type InputTuple = [lzChainId: BigNumberish, trustedRemote: BytesLike];
  export type OutputTuple = [lzChainId: bigint, trustedRemote: string];
  export interface OutputObject {
    lzChainId: bigint;
    trustedRemote: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface NeuronsOFTAdapter extends BaseContract {
  connect(runner?: ContractRunner | null): NeuronsOFTAdapter;
  waitForDeployment(): Promise<this>;

  interface: NeuronsOFTAdapterInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  allowRemote: TypedContractMethod<
    [lzChainId: BigNumberish, allowed: boolean],
    [void],
    "nonpayable"
  >;

  emergencyWithdraw: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  endpoint: TypedContractMethod<[], [string], "view">;

  estimateSendFee: TypedContractMethod<
    [
      dstChainId: BigNumberish,
      to: AddressLike,
      amount: BigNumberish,
      useZro: boolean,
      adapterParams: BytesLike
    ],
    [[bigint, bigint] & { nativeFee: bigint; zroFee: bigint }],
    "view"
  >;

  getBridgeStats: TypedContractMethod<
    [],
    [
      [bigint, bigint, boolean, bigint] & {
        totalTokensSent: bigint;
        totalTokensReceived: bigint;
        bridgeMode: boolean;
        activeChains: bigint;
      }
    ],
    "view"
  >;

  getChainStats: TypedContractMethod<
    [chainId: BigNumberish],
    [[bigint, bigint] & { sent: bigint; received: bigint }],
    "view"
  >;

  getTrustedRemote: TypedContractMethod<
    [chainId: BigNumberish],
    [string],
    "view"
  >;

  isBurnMintMode: TypedContractMethod<[], [boolean], "view">;

  isChainAllowed: TypedContractMethod<
    [chainId: BigNumberish],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  receivedFromChain: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  remoteChainAllowed: TypedContractMethod<
    [arg0: BigNumberish],
    [boolean],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  sendTokens: TypedContractMethod<
    [
      dstChainId: BigNumberish,
      to: AddressLike,
      amount: BigNumberish,
      adapterParams: BytesLike
    ],
    [void],
    "payable"
  >;

  sentToChain: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  setBridgeMode: TypedContractMethod<
    [_isBurnMintMode: boolean],
    [void],
    "nonpayable"
  >;

  setEndpoint: TypedContractMethod<
    [endpoint_: AddressLike],
    [void],
    "nonpayable"
  >;

  setTrustedRemote: TypedContractMethod<
    [lzChainId: BigNumberish, trustedRemote: BytesLike],
    [void],
    "nonpayable"
  >;

  token: TypedContractMethod<[], [string], "view">;

  totalReceived: TypedContractMethod<[], [bigint], "view">;

  totalSent: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  trustedRemoteLookup: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "allowRemote"
  ): TypedContractMethod<
    [lzChainId: BigNumberish, allowed: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "endpoint"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "estimateSendFee"
  ): TypedContractMethod<
    [
      dstChainId: BigNumberish,
      to: AddressLike,
      amount: BigNumberish,
      useZro: boolean,
      adapterParams: BytesLike
    ],
    [[bigint, bigint] & { nativeFee: bigint; zroFee: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBridgeStats"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, boolean, bigint] & {
        totalTokensSent: bigint;
        totalTokensReceived: bigint;
        bridgeMode: boolean;
        activeChains: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getChainStats"
  ): TypedContractMethod<
    [chainId: BigNumberish],
    [[bigint, bigint] & { sent: bigint; received: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTrustedRemote"
  ): TypedContractMethod<[chainId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "isBurnMintMode"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isChainAllowed"
  ): TypedContractMethod<[chainId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "receivedFromChain"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "remoteChainAllowed"
  ): TypedContractMethod<[arg0: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "sendTokens"
  ): TypedContractMethod<
    [
      dstChainId: BigNumberish,
      to: AddressLike,
      amount: BigNumberish,
      adapterParams: BytesLike
    ],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "sentToChain"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "setBridgeMode"
  ): TypedContractMethod<[_isBurnMintMode: boolean], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setEndpoint"
  ): TypedContractMethod<[endpoint_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTrustedRemote"
  ): TypedContractMethod<
    [lzChainId: BigNumberish, trustedRemote: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalReceived"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalSent"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "trustedRemoteLookup"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "BridgeModeSet"
  ): TypedContractEvent<
    BridgeModeSetEvent.InputTuple,
    BridgeModeSetEvent.OutputTuple,
    BridgeModeSetEvent.OutputObject
  >;
  getEvent(
    key: "EndpointSet"
  ): TypedContractEvent<
    EndpointSetEvent.InputTuple,
    EndpointSetEvent.OutputTuple,
    EndpointSetEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RemoteChainAllowed"
  ): TypedContractEvent<
    RemoteChainAllowedEvent.InputTuple,
    RemoteChainAllowedEvent.OutputTuple,
    RemoteChainAllowedEvent.OutputObject
  >;
  getEvent(
    key: "TokensReceived"
  ): TypedContractEvent<
    TokensReceivedEvent.InputTuple,
    TokensReceivedEvent.OutputTuple,
    TokensReceivedEvent.OutputObject
  >;
  getEvent(
    key: "TokensSent"
  ): TypedContractEvent<
    TokensSentEvent.InputTuple,
    TokensSentEvent.OutputTuple,
    TokensSentEvent.OutputObject
  >;
  getEvent(
    key: "TrustedRemoteSet"
  ): TypedContractEvent<
    TrustedRemoteSetEvent.InputTuple,
    TrustedRemoteSetEvent.OutputTuple,
    TrustedRemoteSetEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "BridgeModeSet(bool)": TypedContractEvent<
      BridgeModeSetEvent.InputTuple,
      BridgeModeSetEvent.OutputTuple,
      BridgeModeSetEvent.OutputObject
    >;
    BridgeModeSet: TypedContractEvent<
      BridgeModeSetEvent.InputTuple,
      BridgeModeSetEvent.OutputTuple,
      BridgeModeSetEvent.OutputObject
    >;

    "EndpointSet(address)": TypedContractEvent<
      EndpointSetEvent.InputTuple,
      EndpointSetEvent.OutputTuple,
      EndpointSetEvent.OutputObject
    >;
    EndpointSet: TypedContractEvent<
      EndpointSetEvent.InputTuple,
      EndpointSetEvent.OutputTuple,
      EndpointSetEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RemoteChainAllowed(uint16,bool)": TypedContractEvent<
      RemoteChainAllowedEvent.InputTuple,
      RemoteChainAllowedEvent.OutputTuple,
      RemoteChainAllowedEvent.OutputObject
    >;
    RemoteChainAllowed: TypedContractEvent<
      RemoteChainAllowedEvent.InputTuple,
      RemoteChainAllowedEvent.OutputTuple,
      RemoteChainAllowedEvent.OutputObject
    >;

    "TokensReceived(address,uint16,uint256)": TypedContractEvent<
      TokensReceivedEvent.InputTuple,
      TokensReceivedEvent.OutputTuple,
      TokensReceivedEvent.OutputObject
    >;
    TokensReceived: TypedContractEvent<
      TokensReceivedEvent.InputTuple,
      TokensReceivedEvent.OutputTuple,
      TokensReceivedEvent.OutputObject
    >;

    "TokensSent(address,uint16,address,uint256)": TypedContractEvent<
      TokensSentEvent.InputTuple,
      TokensSentEvent.OutputTuple,
      TokensSentEvent.OutputObject
    >;
    TokensSent: TypedContractEvent<
      TokensSentEvent.InputTuple,
      TokensSentEvent.OutputTuple,
      TokensSentEvent.OutputObject
    >;

    "TrustedRemoteSet(uint16,bytes)": TypedContractEvent<
      TrustedRemoteSetEvent.InputTuple,
      TrustedRemoteSetEvent.OutputTuple,
      TrustedRemoteSetEvent.OutputObject
    >;
    TrustedRemoteSet: TypedContractEvent<
      TrustedRemoteSetEvent.InputTuple,
      TrustedRemoteSetEvent.OutputTuple,
      TrustedRemoteSetEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
